package com.antonylhz.shuati.leetcode.others;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;


class UndirectedGraphNode {
    int label;
    List<UndirectedGraphNode> neighbors;
    UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
}

public class L133 {
	public static void main(String[] args) {
		L133 solution = new L133();
		UndirectedGraphNode node = solution.parseGraph("-1000,-999,1998#-999,-997#-997,-995,-864#-995,-992#-992,-990,-267#-990,-987#-987,-974,418#-974,-973#-973,-970#-970,-967#-967,-965#-965,-954#-954,-951#-951,-949#-949,-942#-942,-931#-931,-924,1640#-924,-919,1475#-919,-918#-918,-916#-916,-915#-915,-914,-911,426#-914,-911#-911,-906,1851#-906,-902#-902,-901#-901,-898,864#-898,-896,1986#-896,-895,314#-895,-894#-894,-886#-886,-884#-884,-882,657#-882,-880,-93,-7#-880,-879#-879,-875#-875,-867#-867,-866#-866,-864#-864,-861#-861,-852#-852,-850#-850,-848#-848,-844#-844,-842#-842,-841#-841,-831#-831,-830#-830,-825#-825,-821,1863#-821,-820#-820,-819#-819,-818,-459,-83#-818,-809#-809,-807,408,818#-807,-802#-802,-798#-798,-797,1863#-797,-791#-791,-789,1917#-789,-786#-786,-783#-783,-778#-778,-776,-77#-776,-775#-775,-772#-772,-771,198#-771,-769#-769,-767,509#-767,-765#-765,-764#-764,-759#-759,-758#-758,-748#-748,-746#-746,-744#-744,-743,-48#-743,-742#-742,-739#-739,-738,-700#-738,-736#-736,-729#-729,-726,-213#-726,-725#-725,-722#-722,-721#-721,-718,292#-718,-715,1331#-715,-712,-653,729#-712,-711,-621#-711,-709#-709,-706#-706,-704#-704,-703,1787#-703,-700#-700,-695#-695,-686#-686,-684#-684,-680#-680,-679#-679,-677#-677,-676,-632#-676,-675,-220#-675,-674,-475#-674,-671#-671,-669#-669,-668,-597#-668,-663#-663,-661#-661,-659#-659,-653,-538#-653,-649#-649,-644,1161#-644,-643#-643,-639#-639,-638#-638,-632#-632,-631#-631,-625,-220#-625,-623,1839#-623,-622#-622,-621#-621,-618#-618,-615#-615,-610#-610,-606#-606,-604,1588#-604,-603,375#-603,-597#-597,-596#-596,-593#-593,-589#-589,-587#-587,-583,-509#-583,-580#-580,-573#-573,-569,290#-569,-568,790#-568,-562#-562,-552#-552,-545#-545,-543#-543,-538#-538,-537#-537,-536#-536,-535#-535,-531,1971#-531,-530,913,1359#-530,-525#-525,-518,774,924,1957#-518,-517,961#-517,-512#-512,-511#-511,-509#-509,-508#-508,-499#-499,-497,1633#-497,-492,369,1302#-492,-488#-488,-485#-485,-483#-483,-481#-481,-475,-288#-475,-474,418#-474,-473#-473,-467,1918#-467,-465,551#-465,-459#-459,-458,619#-458,-457#-457,-455#-455,-452#-452,-450#-450,-449,1741#-449,-446#-446,-444#-444,-436#-436,-430,-267#-430,-428,1169#-428,-427#-427,-426,1886#-426,-421,729,1970#-421,-416#-416,-415#-415,-415,-411,1787#-411,-409#-409,-408#-408,-406#-406,-405#-405,-404#-404,-403#-403,-399#-399,-393#-393,-391#-391,-384,214#-384,-383,-48#-383,-375#-375,-373,1458#-373,-371#-371,-363#-363,-361#-361,-347#-347,-344,707,1659#-344,-340#-340,-339#-339,-329#-329,-327#-327,-326#-326,-325#-325,-324,-300#-324,-322,-102#-322,-319#-319,-313,375#-313,-312,958,1321#-312,-311#-311,-308#-308,-307,947#-307,-306#-306,-305#-305,-303#-303,-300#-300,-298#-298,-296#-296,-295#-295,-294,1423,1544,1993#-294,-292,588#-292,-290,759#-290,-288#-288,-287#-287,-280#-280,-276#-276,-273,396#-273,-272#-272,-271#-271,-268#-268,-267#-267,-259#-259,-257#-257,-247#-247,-243#-243,-237#-237,-236#-236,-233#-233,-231#-231,-230#-230,-229#-229,-227#-227,-226#-226,-221,546#-221,-220#-220,-213#-213,-211#-211,-206#-206,-205#-205,-203#-203,-197#-197,-190,1200#-190,-189,292,1330,1573#-189,-188,-77,940#-188,-183#-183,-178#-178,-176#-176,-173#-173,-171#-171,-169#-169,-165,-151,1583#-165,-158#-158,-157,1464#-157,-156,10,155#-156,-151#-151,-146#-146,-134#-134,-130#-130,-123#-123,-121#-121,-117#-117,-116#-116,-115#-115,-109#-109,-108#-108,-107#-107,-102#-102,-100#-100,-94#-94,-93#-93,-88#-88,-84,-63#-84,-83#-83,-82#-82,-77,916#-77,-75#-75,-73,1243#-73,-70,1160,1189#-70,-67#-67,-63#-63,-60#-60,-58#-58,-56#-56,-51#-51,-48#-48,-45#-45,-44#-44,-42,761#-42,-39#-39,-37,1468#-37,-36#-36,-32,1743#-32,-29#-29,-28#-28,-26#-26,-23#-23,-22#-22,-21#-21,-17#-17,-10#-10,-9#-9,-7#-7,-5#-5,-4#-4,-2#-2,0,459,1771#0,5#5,6#6,7,862#7,10#10,11#11,16#16,17,1650#17,19#19,20,1294#20,22,1113#22,23#23,24#24,26#26,32#32,34,1020#34,36#36,38#38,43,1113,1655#43,44#44,49,1068,1676#49,54,1133#54,55#55,57#57,61#61,63#63,64#64,65#65,72#72,76#76,78,297,850#78,82#82,83#83,84#84,88#88,89,297#89,102,994#102,105#105,106#106,107,1815#107,109,1243#109,110#110,112#112,116#116,125#125,131#131,132#132,145,396#145,146,638#146,147#147,148#148,149#149,152#152,155,567#155,156#156,157#157,159#159,160,1583#160,165#165,167#167,172#172,176,1262#176,182#182,190,302#190,191#191,193#193,194#194,198#198,201#201,205#205,207#207,208#208,212,1757#212,213#213,214#214,216#216,217#217,219#219,220#220,223#223,226#226,228,1479#228,229#229,230#230,234#234,235#235,237#237,238#238,244#244,245#245,249#249,250#250,260#260,269#269,270,1909#270,277,1996#277,279#279,280#280,289#289,290#290,291#291,292#292,294#294,296#296,297#297,299#299,301#301,302#302,303#303,305#305,306,1628#306,311#311,313#313,314#314,317#317,320#320,326#326,328,538#328,336,914,1881#336,337#337,338#338,339#339,347#347,364#364,365#365,369#369,371,752#371,375#375,380#380,384#384,387#387,389#389,393#393,394,395#394,395#395,396#396,400#400,406,1010#406,408,576#408,411#411,412#412,417#417,418#418,420#420,426#426,429#429,431#431,434#434,435,765#435,437#437,439#439,442,808#442,444#444,447#447,450#450,456#456,459#459,460#460,461#461,462#462,463#463,464#464,468#468,475#475,477,1613#477,484#484,489#489,491,780,1228#491,496#496,500#500,501,752#501,509#509,522#522,527#527,528,1893#528,530#530,538#538,546#546,547#547,548#548,549,1454#549,551#551,553#553,558,780,1470#558,560,1133#560,566,1686#566,567,1886#567,568#568,572#572,576#576,585#585,586#586,588#588,589#589,590#590,598#598,599#599,603#603,606#606,607#607,608#608,613#613,618#618,619,956#619,620#620,625#625,634#634,637#637,638#638,641#641,646#646,647,1062#647,649#649,653,1458#653,654,672#654,655#655,656#656,657#657,659#659,660#660,661#661,671,1868#671,672#672,675#675,678#678,687#687,691#691,693#693,694#694,695#695,700#700,701#701,707#707,710#710,716,805#716,717#717,721,1825#721,727#727,729#729,731#731,734#734,735#735,740#740,742#742,745#745,752,1677#752,755#755,758#758,759,1715#759,761#761,763#763,764#764,765#765,768#768,774#774,776#776,780#780,781#781,783#783,787#787,790#790,799#799,800#800,805#805,806#806,808,1262#808,811#811,818#818,822#822,823#823,824#824,825#825,826,1633#826,827#827,828#828,835#835,845,914#845,847#847,849#849,850#850,852#852,856#856,857#857,858#858,860#860,862#862,864#864,865#865,873#873,879#879,882#882,883#883,885,1757#885,887#887,891#891,894#894,895#895,897#897,898,1044#898,899#899,900#900,910#910,912#912,913#913,914,1642#914,915#915,916,916#916,918#918,921#921,924#924,926#926,930#930,931#931,934,1213#934,935#935,936#936,940,998#940,947#947,948#948,950,1182#950,953#953,955#955,956#956,958#958,959#959,961,1086#961,964#964,967#967,969#969,971#971,972#972,975#975,977#977,978#978,983#983,984,1052#984,985#985,988#988,994#994,996#996,998#998,1002#1002,1005#1005,1006#1006,1007#1007,1010#1010,1016#1016,1018#1018,1020#1020,1021#1021,1029#1029,1031#1031,1034#1034,1040#1040,1042#1042,1043#1043,1044#1044,1045#1045,1046#1046,1051#1051,1052#1052,1054#1054,1057,1357,1379#1057,1058#1058,1062#1062,1063#1063,1065#1065,1066#1066,1068#1068,1069#1069,1077#1077,1080#1080,1086#1086,1088#1088,1089#1089,1092#1092,1097#1097,1098#1098,1099#1099,1101#1101,1103#1103,1111#1111,1112#1112,1113#1113,1122#1122,1123,1719#1123,1131#1131,1133#1133,1134#1134,1151#1151,1159#1159,1160#1160,1161#1161,1162#1162,1165#1165,1169#1169,1171,1884#1171,1172#1172,1173#1173,1175#1175,1179#1179,1181#1181,1182#1182,1186#1186,1187#1187,1189#1189,1191#1191,1198#1198,1200#1200,1201#1201,1208#1208,1210#1210,1213#1213,1217#1217,1218#1218,1225#1225,1228#1228,1230,1267#1230,1234#1234,1237#1237,1238#1238,1240#1240,1241,1302#1241,1243#1243,1250#1250,1251#1251,1256#1256,1260#1260,1262#1262,1267#1267,1282#1282,1284#1284,1286#1286,1289#1289,1290#1290,1294#1294,1295#1295,1300#1300,1301#1301,1302#1302,1304#1304,1313#1313,1315#1315,1316,1422#1316,1318#1318,1321,1393#1321,1323#1323,1328#1328,1329#1329,1330#1330,1331#1331,1334#1334,1337#1337,1342#1342,1355#1355,1357#1357,1359#1359,1361#1361,1362#1362,1365#1365,1367#1367,1370#1370,1372#1372,1374#1374,1378#1378,1379#1379,1383,1874#1383,1385#1385,1392,1900#1392,1393#1393,1398#1398,1399#1399,1403#1403,1406#1406,1408#1408,1409#1409,1410#1410,1415#1415,1417#1417,1418#1418,1422#1422,1423#1423,1424,1683#1424,1429#1429,1431#1431,1438#1438,1441#1441,1446,1554#1446,1448#1448,1449#1449,1450#1450,1451#1451,1454#1454,1456#1456,1458#1458,1464#1464,1465,1600#1465,1466,1525#1466,1468#1468,1470#1470,1473#1473,1475#1475,1476#1476,1479#1479,1491,1598#1491,1494#1494,1496,1784#1496,1498#1498,1500#1500,1509#1509,1513#1513,1516#1516,1519#1519,1521#1521,1524#1524,1525#1525,1537#1537,1542#1542,1544#1544,1547#1547,1550,1954#1550,1553#1553,1554#1554,1557#1557,1561#1561,1562#1562,1563,1781,1891#1563,1569#1569,1572#1572,1573#1573,1575#1575,1576,1979#1576,1579#1579,1582#1582,1583#1583,1588,1756#1588,1589#1589,1594#1594,1595#1595,1598#1598,1600#1600,1605#1605,1608#1608,1613#1613,1615#1615,1617#1617,1618#1618,1620#1620,1624#1624,1625#1625,1626#1626,1628#1628,1632,1812#1632,1633#1633,1635#1635,1640#1640,1642#1642,1647#1647,1650#1650,1655#1655,1659#1659,1660#1660,1661#1661,1663#1663,1668#1668,1671#1671,1672,1983#1672,1674,1812#1674,1676#1676,1677#1677,1680#1680,1682#1682,1683#1683,1686#1686,1687#1687,1695#1695,1697#1697,1703#1703,1705#1705,1711#1711,1713#1713,1715#1715,1716#1716,1717#1717,1719#1719,1720#1720,1731#1731,1733#1733,1734#1734,1741#1741,1743#1743,1748#1748,1752#1752,1753#1753,1756#1756,1757#1757,1761#1761,1762#1762,1767#1767,1771#1771,1781#1781,1784#1784,1785#1785,1787#1787,1788#1788,1789#1789,1791#1791,1793#1793,1797#1797,1800#1800,1805#1805,1807#1807,1812#1812,1815#1815,1823#1823,1825#1825,1828#1828,1829#1829,1832#1832,1839#1839,1847#1847,1848#1848,1851#1851,1857#1857,1862#1862,1863#1863,1868#1868,1871#1871,1872#1872,1874#1874,1875#1875,1879#1879,1881#1881,1884#1884,1886#1886,1890#1890,1891#1891,1892#1892,1893#1893,1895#1895,1899#1899,1900#1900,1904#1904,1905#1905,1909#1909,1915#1915,1916#1916,1917#1917,1918#1918,1919#1919,1922#1922,1927#1927,1936#1936,1939#1939,1941#1941,1942#1942,1944#1944,1950#1950,1952#1952,1953#1953,1954#1954,1957#1957,1962#1962,1966#1966,1970#1970,1971#1971,1972#1972,1978#1978,1979#1979,1982#1982,1983#1983,1985#1985,1986#1986,1990#1990,1992#1992,1993#1993,1994#1994,1996#1996,1998#1998");
		solution.cloneGraph(node);
	}
	public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null) return null;
        Stack<UndirectedGraphNode> s = new Stack<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> edge = new HashMap<UndirectedGraphNode, UndirectedGraphNode>(),
                map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        s.push(node);
        for(UndirectedGraphNode neighbor : node.neighbors) {
            if(neighbor!=node) edge.put(neighbor, node);
        }
        List<UndirectedGraphNode> breadth = new ArrayList<UndirectedGraphNode>(), loop = new ArrayList<UndirectedGraphNode>();
        boolean done = false;
        while(!done) {
            done = true;
            while(!s.isEmpty()) breadth.add(s.pop());
            for(UndirectedGraphNode temp : breadth) {
                if(edge.isEmpty()) break;
                if(!map.containsKey(temp)) done = false;
                UndirectedGraphNode newtemp = new UndirectedGraphNode(temp.label);
                map.put(temp, newtemp);
                UndirectedGraphNode source = null, newsource = null;
                if(edge.containsKey(temp)) {
                	source = edge.get(temp);
                	newsource = map.get(source);
                }
                for(UndirectedGraphNode neighbor : temp.neighbors) {
                    if(neighbor==temp) loop.add(temp);
                    if(neighbor!=temp&&(source==null||neighbor!=source)) {
                        edge.put(neighbor, temp);
                        s.push(neighbor);
                    }
                }
                if(edge.containsKey(temp)) {
                    newsource.neighbors.add(newtemp);
                    newtemp.neighbors.add(newsource);
                }
            }
            breadth.clear();
        }
        for(UndirectedGraphNode temp : loop) {
            UndirectedGraphNode newtemp = map.get(temp);
            newtemp.neighbors.add(newtemp);
        }
        return map.get(node);
    }
	private UndirectedGraphNode parseGraph(String str) {
		String[] chunks = str.split("#");
		List<String[]> tokens = new ArrayList<String[]>();
		for(String chunk : chunks) tokens.add(chunk.split(","));
		HashMap<Integer, UndirectedGraphNode> map = new HashMap<Integer, UndirectedGraphNode>();
		for(String[] vertex : tokens) {
			int label = Integer.parseInt(vertex[0]);
			UndirectedGraphNode node = new UndirectedGraphNode(label);
			map.put(label, node);
		}
		for(String[] vertex : tokens) {
			int label = Integer.parseInt(vertex[0]);
			for(int i=1; i<vertex.length; i++) {
				map.get(label).neighbors.add(map.get(Integer.parseInt(vertex[i])));
			}
		}
		return map.get(Integer.parseInt(tokens.get(0)[0]));
	}
}

